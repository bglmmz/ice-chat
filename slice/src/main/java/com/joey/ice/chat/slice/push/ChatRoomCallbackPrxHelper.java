// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `PushChat.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.joey.ice.chat.slice.push;

/**
 * Provides type-specific helper functions.
 **/
public final class ChatRoomCallbackPrxHelper extends Ice.ObjectPrxHelperBase implements ChatRoomCallbackPrx
{
    private static final String __init_name = "init";

    public void init(String[] users)
    {
        init(users, null, false);
    }

    public void init(String[] users, java.util.Map<String, String> __ctx)
    {
        init(users, __ctx, true);
    }

    private void init(String[] users, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_init(begin_init(users, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_init(String[] users)
    {
        return begin_init(users, null, false, false, null);
    }

    public Ice.AsyncResult begin_init(String[] users, java.util.Map<String, String> __ctx)
    {
        return begin_init(users, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_init(String[] users, Ice.Callback __cb)
    {
        return begin_init(users, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_init(String[] users, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_init(users, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_init(String[] users, Callback_ChatRoomCallback_init __cb)
    {
        return begin_init(users, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_init(String[] users, java.util.Map<String, String> __ctx, Callback_ChatRoomCallback_init __cb)
    {
        return begin_init(users, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_init(String[] users, 
                                      IceInternal.Functional_VoidCallback __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_init(users, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_init(String[] users, 
                                      IceInternal.Functional_VoidCallback __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_init(users, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_init(String[] users, 
                                      java.util.Map<String, String> __ctx, 
                                      IceInternal.Functional_VoidCallback __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_init(users, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_init(String[] users, 
                                      java.util.Map<String, String> __ctx, 
                                      IceInternal.Functional_VoidCallback __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_init(users, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_init(String[] users, 
                                       java.util.Map<String, String> __ctx, 
                                       boolean __explicitCtx, 
                                       boolean __synchronous, 
                                       IceInternal.Functional_VoidCallback __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_init(users, 
                          __ctx, 
                          __explicitCtx, 
                          __synchronous, 
                          new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_init(String[] users, 
                                       java.util.Map<String, String> __ctx, 
                                       boolean __explicitCtx, 
                                       boolean __synchronous, 
                                       IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__init_name, __cb);
        try
        {
            __result.prepare(__init_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            Ice.StringSeqHelper.write(__os, users);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_init(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __init_name);
    }

    private static final String __join_name = "join";

    public void join(long timestamp, String name)
    {
        join(timestamp, name, null, false);
    }

    public void join(long timestamp, String name, java.util.Map<String, String> __ctx)
    {
        join(timestamp, name, __ctx, true);
    }

    private void join(long timestamp, String name, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_join(begin_join(timestamp, name, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_join(long timestamp, String name)
    {
        return begin_join(timestamp, name, null, false, false, null);
    }

    public Ice.AsyncResult begin_join(long timestamp, String name, java.util.Map<String, String> __ctx)
    {
        return begin_join(timestamp, name, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_join(long timestamp, String name, Ice.Callback __cb)
    {
        return begin_join(timestamp, name, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_join(long timestamp, String name, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_join(timestamp, name, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_join(long timestamp, String name, Callback_ChatRoomCallback_join __cb)
    {
        return begin_join(timestamp, name, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_join(long timestamp, String name, java.util.Map<String, String> __ctx, Callback_ChatRoomCallback_join __cb)
    {
        return begin_join(timestamp, name, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_join(long timestamp, 
                                      String name, 
                                      IceInternal.Functional_VoidCallback __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_join(timestamp, name, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_join(long timestamp, 
                                      String name, 
                                      IceInternal.Functional_VoidCallback __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_join(timestamp, name, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_join(long timestamp, 
                                      String name, 
                                      java.util.Map<String, String> __ctx, 
                                      IceInternal.Functional_VoidCallback __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_join(timestamp, name, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_join(long timestamp, 
                                      String name, 
                                      java.util.Map<String, String> __ctx, 
                                      IceInternal.Functional_VoidCallback __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_join(timestamp, name, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_join(long timestamp, 
                                       String name, 
                                       java.util.Map<String, String> __ctx, 
                                       boolean __explicitCtx, 
                                       boolean __synchronous, 
                                       IceInternal.Functional_VoidCallback __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_join(timestamp, 
                          name, 
                          __ctx, 
                          __explicitCtx, 
                          __synchronous, 
                          new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_join(long timestamp, 
                                       String name, 
                                       java.util.Map<String, String> __ctx, 
                                       boolean __explicitCtx, 
                                       boolean __synchronous, 
                                       IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__join_name, __cb);
        try
        {
            __result.prepare(__join_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeLong(timestamp);
            __os.writeString(name);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_join(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __join_name);
    }

    private static final String __leave_name = "leave";

    public void leave(long timestamp, String name)
    {
        leave(timestamp, name, null, false);
    }

    public void leave(long timestamp, String name, java.util.Map<String, String> __ctx)
    {
        leave(timestamp, name, __ctx, true);
    }

    private void leave(long timestamp, String name, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_leave(begin_leave(timestamp, name, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_leave(long timestamp, String name)
    {
        return begin_leave(timestamp, name, null, false, false, null);
    }

    public Ice.AsyncResult begin_leave(long timestamp, String name, java.util.Map<String, String> __ctx)
    {
        return begin_leave(timestamp, name, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_leave(long timestamp, String name, Ice.Callback __cb)
    {
        return begin_leave(timestamp, name, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_leave(long timestamp, String name, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_leave(timestamp, name, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_leave(long timestamp, String name, Callback_ChatRoomCallback_leave __cb)
    {
        return begin_leave(timestamp, name, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_leave(long timestamp, String name, java.util.Map<String, String> __ctx, Callback_ChatRoomCallback_leave __cb)
    {
        return begin_leave(timestamp, name, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_leave(long timestamp, 
                                       String name, 
                                       IceInternal.Functional_VoidCallback __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_leave(timestamp, name, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_leave(long timestamp, 
                                       String name, 
                                       IceInternal.Functional_VoidCallback __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_leave(timestamp, name, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_leave(long timestamp, 
                                       String name, 
                                       java.util.Map<String, String> __ctx, 
                                       IceInternal.Functional_VoidCallback __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_leave(timestamp, name, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_leave(long timestamp, 
                                       String name, 
                                       java.util.Map<String, String> __ctx, 
                                       IceInternal.Functional_VoidCallback __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_leave(timestamp, name, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_leave(long timestamp, 
                                        String name, 
                                        java.util.Map<String, String> __ctx, 
                                        boolean __explicitCtx, 
                                        boolean __synchronous, 
                                        IceInternal.Functional_VoidCallback __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_leave(timestamp, 
                           name, 
                           __ctx, 
                           __explicitCtx, 
                           __synchronous, 
                           new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_leave(long timestamp, 
                                        String name, 
                                        java.util.Map<String, String> __ctx, 
                                        boolean __explicitCtx, 
                                        boolean __synchronous, 
                                        IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__leave_name, __cb);
        try
        {
            __result.prepare(__leave_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeLong(timestamp);
            __os.writeString(name);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_leave(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __leave_name);
    }

    private static final String __send_name = "send";

    public void send(long timestamp, String name, String message)
    {
        send(timestamp, name, message, null, false);
    }

    public void send(long timestamp, String name, String message, java.util.Map<String, String> __ctx)
    {
        send(timestamp, name, message, __ctx, true);
    }

    private void send(long timestamp, String name, String message, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_send(begin_send(timestamp, name, message, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_send(long timestamp, String name, String message)
    {
        return begin_send(timestamp, name, message, null, false, false, null);
    }

    public Ice.AsyncResult begin_send(long timestamp, String name, String message, java.util.Map<String, String> __ctx)
    {
        return begin_send(timestamp, name, message, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_send(long timestamp, String name, String message, Ice.Callback __cb)
    {
        return begin_send(timestamp, name, message, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_send(long timestamp, String name, String message, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_send(timestamp, name, message, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_send(long timestamp, String name, String message, Callback_ChatRoomCallback_send __cb)
    {
        return begin_send(timestamp, name, message, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_send(long timestamp, String name, String message, java.util.Map<String, String> __ctx, Callback_ChatRoomCallback_send __cb)
    {
        return begin_send(timestamp, name, message, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_send(long timestamp, 
                                      String name, 
                                      String message, 
                                      IceInternal.Functional_VoidCallback __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_send(timestamp, name, message, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_send(long timestamp, 
                                      String name, 
                                      String message, 
                                      IceInternal.Functional_VoidCallback __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_send(timestamp, name, message, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_send(long timestamp, 
                                      String name, 
                                      String message, 
                                      java.util.Map<String, String> __ctx, 
                                      IceInternal.Functional_VoidCallback __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_send(timestamp, name, message, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_send(long timestamp, 
                                      String name, 
                                      String message, 
                                      java.util.Map<String, String> __ctx, 
                                      IceInternal.Functional_VoidCallback __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_send(timestamp, name, message, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_send(long timestamp, 
                                       String name, 
                                       String message, 
                                       java.util.Map<String, String> __ctx, 
                                       boolean __explicitCtx, 
                                       boolean __synchronous, 
                                       IceInternal.Functional_VoidCallback __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_send(timestamp, 
                          name, 
                          message, 
                          __ctx, 
                          __explicitCtx, 
                          __synchronous, 
                          new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_send(long timestamp, 
                                       String name, 
                                       String message, 
                                       java.util.Map<String, String> __ctx, 
                                       boolean __explicitCtx, 
                                       boolean __synchronous, 
                                       IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__send_name, __cb);
        try
        {
            __result.prepare(__send_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeLong(timestamp);
            __os.writeString(name);
            __os.writeString(message);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_send(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __send_name);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static ChatRoomCallbackPrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), ChatRoomCallbackPrx.class, ChatRoomCallbackPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static ChatRoomCallbackPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), ChatRoomCallbackPrx.class, ChatRoomCallbackPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static ChatRoomCallbackPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), ChatRoomCallbackPrx.class, ChatRoomCallbackPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static ChatRoomCallbackPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), ChatRoomCallbackPrx.class, ChatRoomCallbackPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static ChatRoomCallbackPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, ChatRoomCallbackPrx.class, ChatRoomCallbackPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static ChatRoomCallbackPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, ChatRoomCallbackPrx.class, ChatRoomCallbackPrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::push::ChatRoomCallback"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, ChatRoomCallbackPrx v)
    {
        __os.writeProxy(v);
    }

    public static ChatRoomCallbackPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            ChatRoomCallbackPrxHelper result = new ChatRoomCallbackPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
