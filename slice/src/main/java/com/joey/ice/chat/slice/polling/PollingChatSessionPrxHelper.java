// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `PollingChat.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.joey.ice.chat.slice.polling;

/**
 * Provides type-specific helper functions.
 **/
public final class PollingChatSessionPrxHelper extends Ice.ObjectPrxHelperBase implements PollingChatSessionPrx
{
    private static final String __destroy_name = "destroy";

    public void destroy()
    {
        destroy(null, false);
    }

    public void destroy(java.util.Map<String, String> __ctx)
    {
        destroy(__ctx, true);
    }

    private void destroy(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_destroy(begin_destroy(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_destroy()
    {
        return begin_destroy(null, false, false, null);
    }

    public Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx)
    {
        return begin_destroy(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_destroy(Ice.Callback __cb)
    {
        return begin_destroy(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_destroy(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_destroy(Callback_PollingChatSession_destroy __cb)
    {
        return begin_destroy(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx, Callback_PollingChatSession_destroy __cb)
    {
        return begin_destroy(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_destroy(IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_destroy(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_destroy(IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_destroy(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_destroy(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_destroy(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_destroy(__ctx, 
                             __explicitCtx, 
                             __synchronous, 
                             new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__destroy_name, __cb);
        try
        {
            __result.prepare(__destroy_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_destroy(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __destroy_name);
    }

    private static final String __getInitialUsers_name = "getInitialUsers";

    public String[] getInitialUsers()
    {
        return getInitialUsers(null, false);
    }

    public String[] getInitialUsers(java.util.Map<String, String> __ctx)
    {
        return getInitialUsers(__ctx, true);
    }

    private String[] getInitialUsers(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getInitialUsers_name);
        return end_getInitialUsers(begin_getInitialUsers(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getInitialUsers()
    {
        return begin_getInitialUsers(null, false, false, null);
    }

    public Ice.AsyncResult begin_getInitialUsers(java.util.Map<String, String> __ctx)
    {
        return begin_getInitialUsers(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getInitialUsers(Ice.Callback __cb)
    {
        return begin_getInitialUsers(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getInitialUsers(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getInitialUsers(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getInitialUsers(Callback_PollingChatSession_getInitialUsers __cb)
    {
        return begin_getInitialUsers(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getInitialUsers(java.util.Map<String, String> __ctx, Callback_PollingChatSession_getInitialUsers __cb)
    {
        return begin_getInitialUsers(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getInitialUsers(IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getInitialUsers(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getInitialUsers(IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getInitialUsers(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getInitialUsers(java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getInitialUsers(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getInitialUsers(java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getInitialUsers(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getInitialUsers(java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getInitialUsers(__ctx, __explicitCtx, __synchronous, 
                                     new IceInternal.Functional_TwowayCallbackArg1<String[]>(__responseCb, __exceptionCb, __sentCb)
                                         {
                                             public final void __completed(Ice.AsyncResult __result)
                                             {
                                                 PollingChatSessionPrxHelper.__getInitialUsers_completed(this, __result);
                                             }
                                         });
    }

    private Ice.AsyncResult begin_getInitialUsers(java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getInitialUsers_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getInitialUsers_name, __cb);
        try
        {
            __result.prepare(__getInitialUsers_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String[] end_getInitialUsers(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getInitialUsers_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String[] __ret;
            __ret = Ice.StringSeqHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getInitialUsers_completed(Ice.TwowayCallbackArg1<String[]> __cb, Ice.AsyncResult __result)
    {
        com.joey.ice.chat.slice.polling.PollingChatSessionPrx __proxy = (com.joey.ice.chat.slice.polling.PollingChatSessionPrx)__result.getProxy();
        String[] __ret = null;
        try
        {
            __ret = __proxy.end_getInitialUsers(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getUpdates_name = "getUpdates";

    public ChatRoomEvent[] getUpdates()
    {
        return getUpdates(null, false);
    }

    public ChatRoomEvent[] getUpdates(java.util.Map<String, String> __ctx)
    {
        return getUpdates(__ctx, true);
    }

    private ChatRoomEvent[] getUpdates(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getUpdates_name);
        return end_getUpdates(begin_getUpdates(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getUpdates()
    {
        return begin_getUpdates(null, false, false, null);
    }

    public Ice.AsyncResult begin_getUpdates(java.util.Map<String, String> __ctx)
    {
        return begin_getUpdates(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getUpdates(Ice.Callback __cb)
    {
        return begin_getUpdates(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getUpdates(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getUpdates(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getUpdates(Callback_PollingChatSession_getUpdates __cb)
    {
        return begin_getUpdates(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getUpdates(java.util.Map<String, String> __ctx, Callback_PollingChatSession_getUpdates __cb)
    {
        return begin_getUpdates(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getUpdates(IceInternal.Functional_GenericCallback1<ChatRoomEvent[]> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getUpdates(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getUpdates(IceInternal.Functional_GenericCallback1<ChatRoomEvent[]> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getUpdates(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getUpdates(java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_GenericCallback1<ChatRoomEvent[]> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getUpdates(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getUpdates(java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_GenericCallback1<ChatRoomEvent[]> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getUpdates(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getUpdates(java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.Functional_GenericCallback1<ChatRoomEvent[]> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getUpdates(__ctx, __explicitCtx, __synchronous, 
                                new IceInternal.Functional_TwowayCallbackArg1<com.joey.ice.chat.slice.polling.ChatRoomEvent[]>(__responseCb, __exceptionCb, __sentCb)
                                    {
                                        public final void __completed(Ice.AsyncResult __result)
                                        {
                                            PollingChatSessionPrxHelper.__getUpdates_completed(this, __result);
                                        }
                                    });
    }

    private Ice.AsyncResult begin_getUpdates(java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getUpdates_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getUpdates_name, __cb);
        try
        {
            __result.prepare(__getUpdates_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public ChatRoomEvent[] end_getUpdates(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getUpdates_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            ChatRoomEvent[] __ret;
            __ret = ChatRoomEventSeqHelper.read(__is);
            __is.readPendingObjects();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getUpdates_completed(Ice.TwowayCallbackArg1<ChatRoomEvent[]> __cb, Ice.AsyncResult __result)
    {
        com.joey.ice.chat.slice.polling.PollingChatSessionPrx __proxy = (com.joey.ice.chat.slice.polling.PollingChatSessionPrx)__result.getProxy();
        ChatRoomEvent[] __ret = null;
        try
        {
            __ret = __proxy.end_getUpdates(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __send_name = "send";

    public long send(String message)
        throws com.joey.ice.chat.slice.common.InvalidMessageException
    {
        return send(message, null, false);
    }

    public long send(String message, java.util.Map<String, String> __ctx)
        throws com.joey.ice.chat.slice.common.InvalidMessageException
    {
        return send(message, __ctx, true);
    }

    private long send(String message, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws com.joey.ice.chat.slice.common.InvalidMessageException
    {
        __checkTwowayOnly(__send_name);
        return end_send(begin_send(message, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_send(String message)
    {
        return begin_send(message, null, false, false, null);
    }

    public Ice.AsyncResult begin_send(String message, java.util.Map<String, String> __ctx)
    {
        return begin_send(message, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_send(String message, Ice.Callback __cb)
    {
        return begin_send(message, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_send(String message, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_send(message, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_send(String message, Callback_PollingChatSession_send __cb)
    {
        return begin_send(message, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_send(String message, java.util.Map<String, String> __ctx, Callback_PollingChatSession_send __cb)
    {
        return begin_send(message, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_send(String message, 
                                      IceInternal.Functional_LongCallback __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_send(message, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_send(String message, 
                                      IceInternal.Functional_LongCallback __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_send(message, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_send(String message, 
                                      java.util.Map<String, String> __ctx, 
                                      IceInternal.Functional_LongCallback __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_send(message, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_send(String message, 
                                      java.util.Map<String, String> __ctx, 
                                      IceInternal.Functional_LongCallback __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_send(message, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_send(String message, 
                                       java.util.Map<String, String> __ctx, 
                                       boolean __explicitCtx, 
                                       boolean __synchronous, 
                                       IceInternal.Functional_LongCallback __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_send(message, __ctx, __explicitCtx, __synchronous, 
                          new IceInternal.Functional_TwowayCallbackLongUE(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                              {
                                  public final void __completed(Ice.AsyncResult __result)
                                  {
                                      PollingChatSessionPrxHelper.__send_completed(this, __result);
                                  }
                              });
    }

    private Ice.AsyncResult begin_send(String message, 
                                       java.util.Map<String, String> __ctx, 
                                       boolean __explicitCtx, 
                                       boolean __synchronous, 
                                       IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__send_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__send_name, __cb);
        try
        {
            __result.prepare(__send_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(message);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public long end_send(Ice.AsyncResult __iresult)
        throws com.joey.ice.chat.slice.common.InvalidMessageException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __send_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(com.joey.ice.chat.slice.common.InvalidMessageException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            long __ret;
            __ret = __is.readLong();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __send_completed(Ice.TwowayCallbackLongUE __cb, Ice.AsyncResult __result)
    {
        com.joey.ice.chat.slice.polling.PollingChatSessionPrx __proxy = (com.joey.ice.chat.slice.polling.PollingChatSessionPrx)__result.getProxy();
        long __ret = 0;
        try
        {
            __ret = __proxy.end_send(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static PollingChatSessionPrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), PollingChatSessionPrx.class, PollingChatSessionPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static PollingChatSessionPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), PollingChatSessionPrx.class, PollingChatSessionPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static PollingChatSessionPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), PollingChatSessionPrx.class, PollingChatSessionPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static PollingChatSessionPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), PollingChatSessionPrx.class, PollingChatSessionPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static PollingChatSessionPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, PollingChatSessionPrx.class, PollingChatSessionPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static PollingChatSessionPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, PollingChatSessionPrx.class, PollingChatSessionPrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::polling::PollingChatSession"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, PollingChatSessionPrx v)
    {
        __os.writeProxy(v);
    }

    public static PollingChatSessionPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            PollingChatSessionPrxHelper result = new PollingChatSessionPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
